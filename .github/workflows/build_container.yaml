# SPDX-FileCopyrightText: 2023 - 2024 Ali Sajid Imami
#
# SPDX-License-Identifier: Apache-2.0
# SPDX-License-Identifier: MIT

---
name: Docker Image Generation
on:
  workflow_call:
  workflow_dispatch:

concurrency:
  group: docker-{github.event.ref}

env:
  DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
  DOCKER_REPOSITORY_NAME: ${{ vars.DOCKER_REPOSITORY_NAME }}
  REPOSITORY_NAME: ${{ github.event.repository.name }}
  COSIGN_RELEASE_VERSION: v2.2.4
  SYFT_VERSION: v1.7.0
  SOURCE_DATE_EPOCH: 0
permissions:
  contents: read

jobs:
    docker-build-push:
        runs-on: ubuntu-latest
        permissions:
          id-token: write
          packages: write
        steps:
            - name: Harden Runner
              uses: step-security/harden-runner@91182cccc01eb5e619899d80e4e971d6181294a7 # v2.10.1
              with:
                egress-policy: audit

            - name: Checkout
              uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
            - name: Get Last Commit Date/Time for reproducible builds
              run: echo "SOURCE_DATE_EPOCH=$(git log -1 --pretty=%ct)" >> $GITHUB_ENV
            - name: Generate Docker Metadata
              id: meta
              uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
              with:
                  images: |
                    ${{env.DOCKER_REPOSITORY_NAME}}/${{env.REPOSITORY_NAME}}
                    ghcr.io/${{ github.repository}}
                  tags: |
                    type=ref,event=branch
                    type=ref,event=pr
                    type=ref,event=tag
                    type=semver,pattern={{version}}
                    type=semver,pattern={{major}}.{{minor}}
                    type=semver,pattern={{major}}
                    type=sha
                  labels: |
                    org.opencontainers.image.licenses="MIT AND Apache-2.0"
            - name: Debug Metadata
              run: echo "${{ steps.meta.outputs.json }}"
            - name: Login to DockerHub
              uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
              with:
                  username: ${{ env.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_TOKEN }}
            - name: Login to GitHub Container Registry
              uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GHCR_TOKEN }}
            - name: Setup Buildx
              uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349 # v3.7.1
              with:
                version: "lab:latest"
                driver: cloud
                endpoint: "imamiland/cloud-builder"
            # - name: Setup QEMU
            #   uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf # v3.2.0
            #   with:
            #     platforms: aarch64,amd64
            - name: Build and Push Docker Images
              id: build
              uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75 # v6.9.0
              env:
                SOURCE_DATE_EPOCH: ${{ env.SOURCE_DATE_EPOCH }}
              with:
                  context: .
                  # push: true
                  provenance: true
                  annotations: ${{ steps.meta.outputs.annotations }}
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  platforms: linux/amd64,linux/arm64
                  outputs: ${{ github.event_name == 'pull_request' && 'type=cacheonly' || 'type=registry,push=true' }}
                  # cache-from: type=gha
                  # cache-to: type=gha,mode=max
            - name: Debug Build
              run: echo "${{join(steps.build.outputs.*, '\n')}}"
            - name: Install cosign
              uses: sigstore/cosign-installer@dc72c7d5c4d10cd6bcb8cf6e3fd625a9e5e537da # v3.7.0
              with:
                cosign-release: ${{ env.COSIGN_RELEASE_VERSION }}
            - name: Install Syft
              uses: anchore/sbom-action/download-syft@1ca97d9028b51809cf6d3c934c3e160716e1b605 # v0.17.5
              with:
                syft-version: ${{ env.SYFT_VERSION }}
            - name: Sign and Push
              env:
                IMAGE_DIGEST: ${{ steps.build.outputs.digest }}
                IMAGE_TAGS: ${{ steps.meta.outputs.tags }}
                GITHUB_TOKEN: ${{ github.token }}
                SOURCE_DATE_EPOCH: ${{ env.SOURCE_DATE_EPOCH }}
              run: |
                for tag in ${IMAGE_TAGS}; do
                  image="${tag}@${IMAGE_DIGEST}"
                  original_name="sbom-${tag}.json"
                  sanitized_name=$(echo "$original_name" | sed 's|[/:]|_|g' | tr '_-' '-_')
                  echo "Signing the image: ${image}"
                  echo "Using the original name: $original_name"
                  echo "Using the sanitized name: $sanitized_name"
                  echo "Signing and pushing ${tag}@${IMAGE_DIGEST}"
                  cosign sign --yes ${image}
                  echo "Generating Software Bill of Materials for ${image}"
                  syft ${image} -o spdx-json=${sanitized_name} -v
                  echo "Attesting the Software Bill of Materials for ${image}"
                  cosign attest --type=spdxjson --yes --predicate ${sanitized_name} ${image}
                  echo "Done signing and pushing ${tag}@${IMAGE_DIGEST} with SBOM"
                done
              shell: bash
            - name: Verify Signatures
              env:
                IMAGE_DIGEST: ${{ steps.build.outputs.digest }}
                IMAGE_TAGS: ${{ steps.meta.outputs.tags }}
                GITHUB_TOKEN: ${{ github.token }}
                SOURCE_DATE_EPOCH: ${{ env.SOURCE_DATE_EPOCH }}
              run: |
                for tag in ${IMAGE_TAGS}; do
                  mkdir -p /tmp/cosign-verifications
                  image="${tag}@${IMAGE_DIGEST}"
                  echo "Verifying ${image}"
                  cosign verify ${image} --certificate-identity-regexp="${{vars.COSIGN_CERTIFICATE_IDENTITY}}" --certificate-oidc-issuer-regexp="${{vars.COSIGN_CERTIFICATE_OIDC_ISSUER}}" --output-file="/tmp/cosign-verifications/cosign-verify.json"
                  echo "Verifying SBOM Attestation for ${image}"
                  cosign verify-attestation ${image} --type=spdxjson --certificate-identity-regexp="${{vars.COSIGN_CERTIFICATE_IDENTITY}}" --certificate-oidc-issuer-regexp="${{vars.COSIGN_CERTIFICATE_OIDC_ISSUER}}" --output-file="/tmp/cosign-verifications/cosign-verify-attestation.json"
                  echo "Done verifying ${image}"
                done
              shell: bash
            - name: Upload verification results
              uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
              with:
                path: /tmp/cosign-verifications
                name: cosign-verifications
                compression-level: 9
